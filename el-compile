#!/bin/sh
:; exec emacs --quick --script $0 -- "$@"
"FIXME: lexical binding"

(setq debug-on-error t)
;; FIXME debug.el says it tries to preserve the start of the stack
;; trace, but in practice I'm not seeing this.
(setq debugger-batch-max-lines 1000)

(defconst elcomp--dir (file-name-directory load-file-name))

(load (expand-file-name "loadup.el" elcomp--dir) nil t)
(elcomp--loadup)

(defun elcomp--skip-comments ()
  (while (forward-comment 1)))

(defun elcomp--read-forms ()
  (let ((result '()))
    (elcomp--skip-comments)
    (while (not (eobp))
      (push (read (current-buffer)) result)
      (elcomp--skip-comments))
    result))

(defun elcomp--read-forms-from-file (lisp-file)
  (save-excursion
    (find-file lisp-file)
    (goto-char (point-min))
    (elcomp--read-forms)))

(defun elcomp--driver-convert-one (lisp-file)
  (let ((forms (elcomp--read-forms-from-file lisp-file)))
    (let ((unit (make-elcomp--compilation-unit)))
      ;; FIXME for now we only handle a file full of defuns
      ;; and eval-when-compile.
      (dolist (form forms)
	(cl-case (car form)
	  (eval-when-compile
	    (eval (cons 'progn (cdr form))))
	  (defun
	   (elcomp--plan-to-compile unit form))
	  (t
	   (message "Skipping form %S" (car form)))))
      (elcomp--translate-all unit)
      (elcomp--c-translate unit))))

;; FIXME
(defconst elcomp--driver-output-file "OUTPUT")

(defun elcomp--driver-compile (files)
  (find-file elcomp--driver-output-file)
  (setq-local backup-inhibited t)
  (erase-buffer)
  (dolist (file files)
    (elcomp--driver-convert-one file))
  (save-buffer))

;; FIXME it would be nice to have an argument parsing library in
;; elisp.
(when (equal (car argv) "--")
  (pop argv))

(if (equal (car argv) "--help")
    (message "Usage: el-compile FILE...")
  ;; FIXME argument parsing, etc.
  (elcomp--driver-compile argv))

(setf argv nil)

;; Local variables:
;; Mode: emacs-lisp
;; End:
